{
        "queries": [
                {
                        "name": "Find all owned Domain Admins",
                        "requireNodeSelect": false,
                        "query": "MATCH (n:Group) WHERE n.name =~ {name} WITH n MATCH p=(n)<-[r:MemberOf*1..]-(m) WHERE exists(m.owned) AND NONE (x IN nodes(p) WHERE exists(x.blacklist)) AND NONE (x in relationships(p) WHERE exists(x.blacklist)) RETURN nodes(p),relationships(p)",
                        "allowCollapse": false,
                        "props": {"name": "(?i).*DOMAIN ADMINS.*"}
                },
                {
                        "name": "Find Shortest Paths from owned node to Domain Admins",
                        "requireNodeSelect": true,
                        "nodeSelectQuery":  {
                                "query":"MATCH (n:Group) WHERE n.name =~ {name} RETURN n.name",
                                "queryProps": {"name":"(?i).*DOMAIN ADMINS.*"},
                                            "onFinish": "MATCH (n),(m:Group {name:{result}}),p=shortestPath((n)-[*1..12]->(m)) WHERE exists(n.owned) AND NONE (x IN nodes(p) WHERE exists(x.blacklist)) AND NONE (x in relationships(p) WHERE exists(x.blacklist)) RETURN p",
                                        "start":"",
                                        "end": "{}",
                                        "allowCollapse": true,
                                        "boxTitle": "Select domain to map..."
                        }
                },
                {
                        "name": "Show Wave",
                        "requireNodeSelect": true,
                        "nodeSelectQuery":  {
                                "query":"MATCH (n) WHERE exists(n.wave) WITH DISTINCT n.wave as d RETURN toString(d) ORDER BY d",
                                "queryProps": {},
                                "onFinish": "OPTIONAL MATCH (n1:User {wave:toInt({result})}) WITH collect(distinct n1) as c1 OPTIONAL MATCH (n2:Computer {wave:toInt({result})}) WITH collect(distinct n2) + c1 as c2 OPTIONAL MATCH (n3:Group {wave:toInt({result})}) WITH c2, collect(distinct n3) + c2 as c3 UNWIND c2 as n UNWIND c3 as m MATCH (n)-[r]->(m) WHERE not(exists(n.blacklist)) AND not(exists(m.blacklist)) AND not(exists(r.blacklist)) RETURN n,r,m",
                                "start": "",
                                "end": "",
                                "allowCollapse": true,
                                "boxTitle": "Select wave..."
                        }
                },
                {
                        "name": "Highlight Delta for Wave",
                        "requireNodeSelect": true,
                        "nodeSelectQuery":  {
                                "query":"MATCH (n) WHERE exists(n.wave) WITH DISTINCT n.wave as d RETURN toString(d) ORDER BY d",
                                "queryProps": {},
                                "onFinish": "MATCH (n)-[r]->(m) WHERE n.wave<=toInt({result}) AND not(exists(n.blacklist)) AND not(exists(m.blacklist)) AND not(exists(r.blacklist)) RETURN n,r,m",
                                "start": "",
                                "end": "",
                                "allowCollapse": true,
                                "boxTitle": "Select wave to show deltas..."
                        }
                },
                {
                        "name": "Find Clusters of Password Reuse",
                        "requireNodeSelect": false,
                        "query": "MATCH p=(n)-[r:SharesPasswordWith]->(m) WHERE not(exists(n.blacklist)) AND not(exists(m.blacklist)) RETURN p",
                        "allowCollapse": true,
                        "props": {}
                },
                {
                        "name": "Show Blacklisted Nodes",
                        "requireNodeSelect": false,
                        "query": "MATCH (n) WHERE exists(n.blacklist) RETURN n",
                        "allowCollapse": true,
                        "props": {}
                },
                {
                        "name": "Show Blacklisted Relationships",
                        "requireNodeSelect": false,
                        "query": "MATCH (n)-[r]->(m) WHERE exists(r.blacklist) RETURN n,r,m",
                        "allowCollapse": true,
                        "props": {}
                },
                {
                        "name": "Show Blacklist",
                        "requireNodeSelect": false,
                        "query": "OPTIONAL MATCH (n {blacklist:true}) WITH n OPTIONAL MATCH p=(()-[{blacklist:true}]->()) RETURN n,p",
                        "allowCollapse": true,
                        "props": {}
                },
                {
                        "name": "Show owned Nodes",
                        "requireNodeSelect": false,
                        "query": "MATCH (n) WHERE exists(n.owned) RETURN n",
                        "allowCollapse": true,
                        "props": {}
                }
	]
}
